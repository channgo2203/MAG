/*
 * This code is automatically generated by MAG
 * Copyright (C) 2014 Chan Ngo, INRIA
 * chan.ngo@inria.fr
 */


#ifndef MONITOR_H
#define MONITOR_H

#include <systemc.h>
#include <iostream>
#include <fstream>
#include <cassert>
#include <cstdlib>
#include <sstream>
#include <string.h>

/*
 * User objects, forward declaration
 */

class Consumer;
class Producer;

/*
 * Monitor class declaration
 */

class monitor0 : public sc_core::mon_prototype {

public:

  /*
   * Constructor
   */

  monitor0(sc_core::mon_observer* obs, Consumer* obj0, Producer* obj1);

  /*
   * Destructor
   */

  ~monitor0();

  /*
   * Simulate a step of the monitor.
   */

  void step();

  /*
   * Kernel-level callbacks and user-code callbacks
   */

  virtual void callback_timed_notify_phase_end();


  // Value callbacks (if any)


  /*
   * Attributes
   */

private: 

  sc_core::mon_observer* observer;
  mon_status_t status;
  Consumer* pnt_con;
  Producer* pnt_pro;
};



/*
 * This object is derived from mon_observer defined in the SystemC
 * modified kernel. Thus, we can pass it as an argument to the classes
 * implementing the monitors.
 */
class local_observer : public sc_core::mon_observer {

 public:

  // Constructor
  local_observer(unsigned int verbosity, Consumer* pnt_con, Producer* pnt_pro);

  ~local_observer();

  static local_observer* getInstance();

  static local_observer* createInstance(unsigned int verbosity, Consumer* pnt_con, Producer* pnt_pro);

 private:

  static local_observer* m_instance;

};

#endif
